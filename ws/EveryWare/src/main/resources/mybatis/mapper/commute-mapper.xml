<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="commuteMapper">

	<insert id="insertCommute">
		INSERT INTO COMMUTE (COM_CODE, ECODE, START_TIME, START_TIME_FORMAT, END_TIME, END_TIME_FORMAT, COM_STATUS)
		VALUES(SEQ_COM_CODE_NO.NEXTVAL, #{eCode}, #{startTime}, #{startTimeFormat}, #{endTime}, #{endTimeFormat}, #{comStatus})
	</insert>
	
	<select id="selectNormalCnt" resultType="int">
		SELECT COUNT(*) FROM COMMUTE WHERE COM_STATUS  = '정상출근' AND ECODE = #{eCode} 
		AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD')) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="selectEarlyCnt" resultType="int">
		SELECT COUNT(*) FROM COMMUTE WHERE COM_STATUS = '조기퇴근' AND ECODE = #{eCode}
		AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="selectLateCnt" resultType="int">
		SELECT COUNT(*) FROM COMMUTE WHERE COM_STATUS  = '지각' AND ECODE = #{eCode}
		AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="selectAbsentCnt" resultType="int">
		SELECT COUNT(*) FROM COMMUTE WHERE COM_STATUS  = '결근' AND ECODE = #{eCode}
		AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<insert id="insertOverwork" >
		INSERT INTO OVERWORK(OVER_CODE, ECODE, DEPT_CODE, OVER_DATE, OVER_TIME, OVER_NAME, OVER_REASON)
		VALUES(SEQ_OVER_CODE_NO.NEXTVAL, #{eCode}, #{deptCode}, #{overDate}, #{overTime}, #{overName}, #{overReason})
	</insert>
	
	<select id="selectOverworkList" resultType="OverworkVo">
		SELECT OVER_CODE, OVER_DATE, OVER_TIME, OVER_NAME, OVER_REASON, OVER_APPROVAL FROM OVERWORK
		WHERE ECODE = #{eCode} ORDER BY OVER_CODE DESC
	</select>
	
	<select id="selectCommuteTotalCnt" resultType="int">
		SELECT COUNT(*) FROM COMMUTE WHERE ECODE = #{eCode}
	</select>
	
	<select id="selectCommuteList" resultType="CommuteVo">
		SELECT TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE
		, START_TIME_FORMAT, END_TIME_FORMAT, ROUND((TO_DATE(END_TIME, 'HH24:MI:SS') - TO_DATE(START_TIME, 'HH24:MI:SS')) * 24, 2) AS WORKING_TIME, COM_STATUS 
		FROM COMMUTE WHERE ECODE = #{eCode} ORDER BY ENROLL_DATE DESC
	</select>
	
	<select id="selectCommuteDateCnt" resultType="int">
		SELECT COUNT(*)
		FROM COMMUTE
		WHERE TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') BETWEEN SUBSTR(#{enrollDate}, 1,10) AND SUBSTR(#{enrollDate}, 12)
		AND COM_STATUS = #{comStatus} AND ECODE = #{eCode}
	</select>
	
	<select id="selectCommuteDateList" resultType="CommuteVo">
		SELECT TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE, START_TIME_FORMAT, END_TIME_FORMAT
		, ROUND((TO_DATE(END_TIME, 'HH24:MI:SS') - TO_DATE(START_TIME, 'HH24:MI:SS')) * 24, 2) AS WORKING_TIME, COM_STATUS
		FROM COMMUTE
		WHERE ECODE = #{eCode} AND TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') BETWEEN SUBSTR(#{enrollDate}, 1,10) AND SUBSTR(#{enrollDate}, 12)
		AND COM_STATUS = #{comStatus} ORDER BY ENROLL_DATE DESC
	</select>
	
	<select id="selectWorkDays" resultType="int">
		SELECT COUNT(CASE WHEN COM_STATUS = '지각' THEN 1 WHEN COM_STATUS ='정상출근' THEN 1 WHEN COM_STATUS = '조기퇴근'  THEN 1 END) 
		AS WORKDAYS FROM COMMUTE WHERE ECODE = #{eCode} 
		AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="seletWorkTimeAll" resultType="int">
		SELECT NVL(SUM(ROUND((TO_DATE(END_TIME, 'HH24:MI:SS') - TO_DATE(START_TIME, 'HH24:MI:SS')) * 24, 2)),0) AS WORKTIMEALL
		FROM COMMUTE WHERE ECODE = #{eCode} AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="selectWorkTimeAvg" resultType="double">
		SELECT NVL(AVG(ROUND((TO_DATE(END_TIME, 'HH24:MI:SS') - TO_DATE(START_TIME, 'HH24:MI:SS')) * 24, 2)),0) AS WORKTIMEAVG
		FROM COMMUTE WHERE ECODE = #{eCode} AND ENROLL_DATE BETWEEN (TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD') ) AND (LAST_DAY(SYSDATE))
	</select>
	
	<select id="selectWorkToday" resultType="int">
		SELECT NVL(MAX(ROUND((TO_DATE(END_TIME, 'HH24:MI:SS') - TO_DATE(START_TIME, 'HH24:MI:SS')) * 24, 2)),0) AS WORKING_TIME 
		FROM COMMUTE WHERE ECODE = #{eCode} AND TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
	</select>
	
	
	<select id="selectTotalCnt" resultType="int">
		SELECT COUNT(*) FROM OVERWORK WHERE ECODE = #{eCode}
	</select>
	
	<select id="selectDateCnt" resultType="int">
		SELECT COUNT(*) FROM OVERWORK WHERE ECODE = #{eCode} 
		AND OVER_DATE = TO_CHAR(#{overDate})
	</select>
	
	<select id="selectDateList" resultType="OverworkVo">
		SELECT OVER_CODE, OVER_DATE, OVER_TIME, OVER_NAME, OVER_REASON, OVER_APPROVAL FROM OVERWORK
		WHERE ECODE = #{eCode} AND OVER_DATE = TO_CHAR(#{overDate}) ORDER BY OVER_CODE DESC
	</select>
	
	<select id="selectRightVo" resultType="EmpVo">
		SELECT R.RIGHT_CODE, E.EMP_CODE, E.EMP_NAME
		FROM EMP E
		JOIN RIGHT R ON E.RIGHT_CODE = R.RIGHT_CODE
		WHERE E.EMP_CODE = #{eCode}
	</select>
	
	<select id="selectDeptVo" resultType="DayoffVo">
		SELECT E.DEPT_CODE 
		FROM EMP E
		JOIN DEPT D ON D.DEPT_CODE = E.DEPT_CODE
		WHERE EMP_CODE = #{eCode}
	</select>
	
	<select id="selectAdDateCnt" resultType="int">
		SELECT COUNT(*) FROM OVERWORK 
		WHERE OVER_DATE = TO_CHAR(#{overDate})
	</select>
	
	<select id="selectAdDateList" resultType="OverworkVo">
		SELECT O.OVER_CODE, E.EMP_NAME AS ECODE, D.DEPT_NAME AS DEPT_CODE, OVER_DATE, OVER_TIME, OVER_NAME, OVER_REASON, OVER_ENROLLDATE, OVER_APPROVAL
		FROM OVERWORK O
		JOIN EMP E ON E.EMP_CODE = O.ECODE
		JOIN DEPT D ON E.DEPT_CODE = D.DEPT_CODE
		WHERE OVER_DATE = TO_CHAR(#{overDate}) ORDER BY OVER_CODE DESC
	</select>
	
	<select id="selectAdminTotalCnt" resultType="int">
		SELECT COUNT(*) FROM OVERWORK
	</select>
	
	<select id="selectAdminOverworkList" resultType="OverworkVo">
		SELECT O.OVER_CODE, E.EMP_NAME AS ECODE, D.DEPT_NAME AS DEPT_CODE, OVER_DATE, OVER_TIME, OVER_NAME, OVER_REASON, OVER_ENROLLDATE, OVER_APPROVAL
		FROM OVERWORK O
		JOIN EMP E ON E.EMP_CODE = O.ECODE
		JOIN DEPT D ON E.DEPT_CODE = D.DEPT_CODE
	</select>
	
	<update id="updateApproval">
		UPDATE OVERWORK SET OVER_APPROVAL = #{overApproval} WHERE OVER_CODE = #{overCode}
	</update>
	
	<select id="selectEmpProfileName" resultType="EmpVo">
		SELECT * FROM EMP WHERE EMP_CODE = #{empCode}
	</select>
	
</mapper>